{"language":"Solidity","sources":{"contracts/Arcas/SkillStaking/PositionManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Interfaces/IChampion.sol\";\nimport \"./Interfaces/IArcasTreasury.sol\";\nimport \"./Interfaces/ISkillStaking.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract PositionManager {\n\n    struct Position {\n        uint256 stakeAmount;\n        uint256 champId;\n        uint256 yieldBlock;\n    }\n\n    // User Position mapping\n    mapping(address => Position[]) public addressPositions;\n    // Amount staked under each champion by ID\n    mapping(uint256 => uint256) public champIdStakeAmount;\n    // Contracts\n    IERC20 public arcasToken;\n    ISkillStaking public skillStakingContract;\n    IArcasTreasury public arcasTreasuryContract;\n    IChampionERC721 public championContract;\n\n    constructor(\n        address _arcasTokenAddress,\n        address _skillStakingAddress,\n        address _arcasTreasuryAddress,\n        address _championContract\n    ) {\n        arcasToken = IERC20(_arcasTokenAddress);\n        skillStakingContract = ISkillStaking(_skillStakingAddress);\n        arcasTreasuryContract = IArcasTreasury(_arcasTreasuryAddress);\n        championContract = IChampionERC721(_championContract);\n    }\n\n    function deposit(uint256 amount, uint256 championId) external {\n\n        // Ensure amount is larger than 0 or deposit is useless\n        require(amount > 0, \"Amount must be greater than 0\");\n        // Ensure that the championId input is valid if below the total counter\n        require(championId < championContract.counter());\n        // Calculate the fee amount to burn to the champion, fix the decimals added on the returned value\n        uint256 feeAmount = (amount * (skillStakingContract.calculateEntryFee(amount, champIdStakeAmount[championId]))) / 100000000;\n        //Ensure that the total staked under the Champion doesn't go over the set limit\n        require(champIdStakeAmount[championId] + amount - feeAmount <= skillStakingContract.champLimit());\n        // Transfer ARCAS tokens from the user to the contract\n        require(arcasToken.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\n\n        // Create a new position for the user\n        Position memory newPosition = Position({\n            stakeAmount: amount-feeAmount,\n            champId: championId,\n            yieldBlock: block.number\n\n        });\n        // Add the position to the user's positions array\n        addressPositions[msg.sender].push(newPosition);\n        // Add the amount staked under the champion\n        champIdStakeAmount[championId] += (amount-feeAmount);\n        // Approve the champ contract for the fee burning\n        arcasToken.approve(address(championContract), feeAmount);\n        // Call the depositArcas function in the Champion contract to pay entry fee\n        championContract.depositArcas(championId, feeAmount);\n\n    }\n\n    function collect(uint256 positionIndex) public {\n\n        //Positions of the user and position selected for collection\n        Position[] storage positions = addressPositions[msg.sender];\n        Position storage position = positions[positionIndex];\n\n        //Calculate the effective block yield of the selected champion\n        uint256 champBlockYield = skillStakingContract.calculateBlockYield(champIdStakeAmount[position.champId], position.champId, arcasToken.balanceOf(address(this)) );\n        //Calculate the outstanding yield for the position\n        uint256 positionYield = ((champBlockYield * (block.number - position.yieldBlock)) * position.stakeAmount ) /champIdStakeAmount[position.champId];\n        //Calculate Player fee from 0 - 20% of positionYield\n        uint256 playerFee = positionYield * ( champIdStakeAmount[position.champId] * 20000000 / skillStakingContract.champLimit()) / 100000000;\n\n        //Payout player fee\n        arcasTreasuryContract.payout(playerFee, championContract.ownerOf(position.champId));\n        //Payout staker yield\n        arcasTreasuryContract.payout(positionYield-playerFee, msg.sender);\n        //Write yield stamp to position\n        position.yieldBlock = block.number;\n\n    }\n\n    function withdraw(uint256 positionIndex) external {\n        require(positionIndex < addressPositions[msg.sender].length, \"Invalid position index\");\n\n        //Positions of the user and position selected for collection\n        Position[] storage positions = addressPositions[msg.sender];\n        Position storage position = positions[positionIndex];\n\n        collect(positionIndex);\n\n        // Transfer staked amount and yield back to the user\n        require(arcasToken.transfer(msg.sender, position.stakeAmount), \"Transfer failed\");\n\n        // Delete the position from the user's positions array\n        if (positionIndex < addressPositions[msg.sender].length - 1) {\n            // Move the last position to the deleted position index\n            addressPositions[msg.sender][positionIndex] = addressPositions[msg.sender][addressPositions[msg.sender].length - 1];\n        }\n        // Remove the last position (duplicate)\n        addressPositions[msg.sender].pop();\n    }\n\n    function getUserPositions(address user) external view returns (Position[] memory) {\n        return addressPositions[user];\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"contracts/Arcas/SkillStaking/Interfaces/ISkillStaking.sol":{"content":"pragma solidity ^0.8.0;\n\n// The skillstaking contract contains the dao set variables and formulas for the protocol. It holds protocol state not user state.\n\ninterface ISkillStaking {\n    function champLimit() external view returns (uint256);\n    function yieldBlockReward() external view returns (uint256);\n\n    function calculateEntryFee(uint256 amount, uint256 champStakedTotal) external view returns (uint256);\n    function calculateBlockYield(uint256 champStakedTotal, uint256 championId, uint256 totalStaked) external view returns (uint256);\n}"},"contracts/Arcas/SkillStaking/Interfaces/IArcasTreasury.sol":{"content":"pragma solidity ^0.8.0;\n\n// The treasury contract holds the usd to be distributed via skillstaking\n\ninterface IArcasTreasury {\n    function payout(uint256 amount, address recipient) external;\n}"},"contracts/Arcas/SkillStaking/Interfaces/IChampion.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IChampionERC721 {\n\n    // The token to burn under the Champion\n    function arcasToken() external view returns (IERC20);\n\n    // The count of the next minted champion (supply + 1)\n    function counter() external view returns (uint256);\n\n    // Function to mint a champion, later to be locked under store logic\n    function mintChampion(address to) external;\n\n    // Function to retrieve the Genetics int and burnt Arcas int of a specific Champion\n    function getChampionMetadata(uint256 tokenId) external view returns (uint, uint);\n\n    // Function to deposit Arcas under a champion NFT effectively burning it forever\n    function depositArcas(uint256 tokenId, uint256 amount) external;\n\n    // Function to retrieve the array of token ids held by an address\n    function getOwnedTokens(address owner) external view returns (uint256[] memory);\n\n    // ERC721 functions\n    function balanceOf(address owner) external view returns (uint256);\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function approve(address to, uint256 tokenId) external;\n    function getApproved(uint256 tokenId) external view returns (address);\n    function setApprovalForAll(address operator, bool approved) external;\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[],"evmVersion":"paris"}}