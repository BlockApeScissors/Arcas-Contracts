{"language":"Solidity","sources":{"contracts/Arcas/SkillStaking/SkillStaking.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./Interfaces/IRankOracle.sol\";\nimport \"./Interfaces/IChampion.sol\";\n\ncontract SkillStaking is Ownable {\n\n    uint256 public champLimit;\n    uint256 public yieldBlockReward;\n    IRankOracle public rankOracle;\n    IChampionERC721 public championNft;\n    IERC20 public arcas;\n\n    constructor(\n\n        uint256 _champLimit,\n        uint256 _yieldBlockReward,\n        address _rankOracle,\n        address _championNft,\n        address _arcas\n\n    ) Ownable(msg.sender) {\n\n        champLimit = _champLimit;\n        yieldBlockReward = _yieldBlockReward;\n        rankOracle = IRankOracle(_rankOracle);\n        championNft = IChampionERC721(_championNft);\n        arcas = IERC20(_arcas);\n    \n    }\n\n    function setChampLimit(uint256 newLimit) external onlyOwner {\n        champLimit = newLimit;\n    }\n\n    function setYieldMultiplier(uint256 _yieldBlockReward) external onlyOwner {\n        yieldBlockReward = _yieldBlockReward;\n    }\n\n    function setRankOracle(address _rankOracle) external onlyOwner {\n        rankOracle = IRankOracle(_rankOracle);\n    }\n\n    function calculateEntryFee(uint256 amount, uint256 champStakedTotal) external view returns (uint256) {\n        // Calculate the current entry fee level as a % * 1000\n        return ((champStakedTotal + (amount/2) ) * 1000000 / champLimit);\n\n    }\n\n    function calculateBlockYield(uint256 champStakedTotal, uint256 championId, uint256 totalStaked) external view returns (uint256) {\n\n        //We have RankOracle MMR of Champ, Total Champ count, total MMR, yieldreward, adjusted by 1000000\n        uint256 avgMmr = (rankOracle.totalMMR()) / (championNft.counter() - 1);\n\n        // MMR Skew as a % * 1000000, as mmr < avgMmr it is a reduction\n        uint256 MmrSkew = (rankOracle.getChampionMMR(championId) * 1000000)/avgMmr;\n\n        // Share of Skillstaking as a % * 1000000\n        uint256 poolShare = (champStakedTotal * 1000000) / totalStaked;\n\n        // Find the % of block rewards due to the champion\n        return (((yieldBlockReward * poolShare) / 1000000) * MmrSkew) / 1000000; \n\n    }\n\n}\n"},"contracts/Arcas/SkillStaking/Interfaces/IChampion.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// The champion contract represents the ERC721 NFT. The contracts have 2 variables, a genetic seed for stat and trait generation as well as an OwnedArcas representing Arcas burnt under the NFT.\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IChampionERC721 {\n\n    //The token to burn under the Champion\n    function arcasToken() external view returns (IERC20);\n\n    //The count of the next minted champion (supply + 1)\n    function counter() external view returns (uint256);\n\n    //Function to mint a champion, later to be locked under store logic\n    function mintChampion(address to) external;\n\n    //Function to retrieve the Genetics int and burnt Arcas int of a specific Champion\n    function getChampionMetadata(uint256 tokenId) external view returns (uint, uint);\n\n    //Function to deposit Arcas under a champion NFT effectively burning it forever\n    function depositArcas(uint256 tokenId, uint256 amount) external;\n\n    //Function to retrieve the array of token ids held by an address\n    function getOwnedTokens(address owner) external view returns (uint256[] memory);\n}\n"},"contracts/Arcas/SkillStaking/Interfaces/IRankOracle.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n//This is a smart contract to which we write and update champion mmr scores\n\ninterface IRankOracle {\n\n    //Address of the connected Champion NFTs\n    function championNFT() external view returns (address);\n\n    //Total MMR in the oracle\n    function totalMMR() external view returns (uint256);\n\n    //Priveleged function to set and update MMRs\n    function setChampionMMRs(uint256[] memory mmrs) external;\n    \n    //Function to retrieve the MMR of a champion\n    function getChampionMMR(uint256 championId) external view returns (uint256);\n\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[],"evmVersion":"paris"}}